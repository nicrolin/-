import gradio as gr
import numpy as np
import cv2
import tempfile
import os
import traceback

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PaddleOCR –∏ EasyOCR (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚Äî –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö)
PADDLE_AVAILABLE = False
EASY_AVAILABLE = False
paddle_ocr = None
easy_reader = None
paddle_import_error = None
easy_import_error = None

try:
    from paddleocr import PaddleOCR
    PADDLE_AVAILABLE = True
except Exception as e:
    paddle_import_error = traceback.format_exc()
    PADDLE_AVAILABLE = False

try:
    import easyocr
    EASY_AVAILABLE = True
except Exception as e:
    easy_import_error = traceback.format_exc()
    EASY_AVAILABLE = False

# –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –ª–µ–Ω–∏–≤–æ (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ —Å—Ä–∞–∑—É –≤ –ª–æ–≥)
try:
    if PADDLE_AVAILABLE:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è ‚Äî –Ω–æ –¥–µ–ª–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        paddle_ocr = PaddleOCR(use_angle_cls=True, lang="ru")
except Exception:
    paddle_ocr = None
    paddle_import_error = traceback.format_exc()
    PADDLE_AVAILABLE = False

try:
    if EASY_AVAILABLE:
        # easyocr.Reader —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ easyocr —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        easy_reader = easyocr.Reader(['ru', 'en'])
except Exception:
    easy_reader = None
    easy_import_error = traceback.format_exc()
    EASY_AVAILABLE = False

def ocr_receipt(image):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (recognized_text, debug_log)
    """
    debug_lines = []
    try:
        if image is None:
            return "", "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."

        # –ï—Å–ª–∏ Gradio –¥–∞—ë—Ç PIL.Image, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy
        if not isinstance(image, np.ndarray):
            # gr.Image(type="pil") –¥–∞—ë—Ç PIL.Image
            image = np.array(image)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å RGB –∏–ª–∏ RGBA
        if image.ndim == 2:
            # grayscale -> BGR
            img_bgr = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
        elif image.shape[2] == 4:
            # RGBA -> RGB
            img_bgr = cv2.cvtColor(image, cv2.COLOR_RGBA2BGR)
        else:
            # RGB -> BGR
            img_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (PaddleOCR —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
            tmp_path = tmpf.name
            cv2.imwrite(tmp_path, img_bgr)

        debug_lines.append(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {tmp_path}")

        # –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî PaddleOCR
        if paddle_ocr is not None:
            debug_lines.append("–ü—Ä–æ–±—É–µ–º PaddleOCR...")
            try:
                res = paddle_ocr.ocr(tmp_path, cls=True)  # –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ cls=True
                debug_lines.append("PaddleOCR –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–±–µ–∑ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π)
                lines = []
                # res –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    # –æ–±—ã—á–Ω–æ res = [page], –≥–¥–µ page = [[box, (text, conf)], ...]
                    for page in res:
                        if isinstance(page, list):
                            for item in page:
                                # item –º–æ–∂–µ—Ç –±—ã—Ç—å [box, (text, conf)]
                                try:
                                    txt = item[1][0]
                                except Exception:
                                    txt = str(item)
                                lines.append(txt)
                        else:
                            lines.append(str(page))
                except Exception:
                    # fallback
                    debug_lines.append("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ PaddleOCR.")
                    lines = [str(res)]

                recognized = "\n".join(lines).strip()
                os.remove(tmp_path)
                if not recognized:
                    debug_lines.append("PaddleOCR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
                return recognized, "\n".join(debug_lines)
            except Exception as e:
                debug_lines.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PaddleOCR:")
                debug_lines.append(traceback.format_exc())
                # –ø—Ä–æ–¥–æ–ª–∂–∏–º –∫ fallback

        # Fallback ‚Äî EasyOCR
        if easy_reader is not None:
            debug_lines.append("–ü—Ä–æ–±—É–µ–º EasyOCR...")
            try:
                # easyocr –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å numpy –∏–ª–∏ –ø—É—Ç—å; –∏—Å–ø–æ–ª—å–∑—É–µ–º numpy
                # reader.readtext –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list of [bbox, text, conf] –∏–ª–∏ –µ—Å–ª–∏ detail=0 list of text
                res = easy_reader.readtext(tmp_path, detail=1)  # detail=1 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å bbox –∏ conf
                debug_lines.append("EasyOCR –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                lines = []
                for item in res:
                    try:
                        txt = item[1]
                    except Exception:
                        txt = str(item)
                    lines.append(txt)
                recognized = "\n".join(lines).strip()
                os.remove(tmp_path)
                if not recognized:
                    debug_lines.append("EasyOCR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
                return recognized, "\n".join(debug_lines)
            except Exception:
                debug_lines.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ EasyOCR:")
                debug_lines.append(traceback.format_exc())
                try:
                    os.remove(tmp_path)
                except:
                    pass

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        debug_lines.append("–ù–∏ PaddleOCR, –Ω–∏ EasyOCR –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –æ–±–µ –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É.")
        if not PADDLE_AVAILABLE:
            debug_lines.append("PaddleOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
            debug_lines.append(paddle_import_error or "–Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        if not EASY_AVAILABLE:
            debug_lines.append("EasyOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
            debug_lines.append(easy_import_error or "–Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        debug_lines.append("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        debug_lines.append("1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ paddleocr –∏ paddlepaddle (pip install paddleocr paddlepaddle) –∏–ª–∏ easyocr (pip install easyocr).")
        debug_lines.append("2) –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ç–æ–º –∂–µ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –≥–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã.")
        debug_lines.append("3) –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Windows –∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ paddlepaddle, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π wheel —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ paddlepaddle.")

        return "", "\n".join(debug_lines)

    except Exception:
        debug = traceback.format_exc()
        return "", f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{debug}"
    finally:
        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
        try:
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.remove(tmp_path)
        except:
            pass

# ========== UI Gradio ==========
with gr.Blocks(theme=gr.themes.Soft(primary_hue="pink")) as demo:
    gr.Markdown("<h2 style='text-align:center;color:#d63384'>üßæ OCR –ß–µ–∫ ‚Äî –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</h2>")
    with gr.Row():
        with gr.Column():
            image_input = gr.Image(type="pil", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫")
            submit_btn = gr.Button("üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
        with gr.Column():
            recognized = gr.Textbox(label="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", lines=20, interactive=False)
            debug = gr.Textbox(label="–õ–æ–≥/–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—á–∏—Ç–∞–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)", lines=20, interactive=False)

    submit_btn.click(fn=ocr_receipt, inputs=image_input, outputs=[recognized, debug])

if __name__ == "__main__":
    demo.launch()
